#tool to generate hydra syntax fot http-post-form bruteforcing

print('##############################################')
print('#                 Hydragen                   #')
print('#                                            #')
print('#           Syntax generator for             #')
print('#  bruteforcing http-post forms with Hydra   #')
print('#                                            #')
print('#           github.com/the-jcksn             #')
print('##############################################')
print()

#if user types something other than the options specified
def invalid_input():
        print('\nInvalid input. Quitting.')
        quit()

#are we working with password lists or username lists
def single_or_list(term,type):
        if term == 'username':
                flag = '-l'
        elif term == 'password':
                flag = '-p'
        if type == 'list':
                flag = flag.upper()
        if type == 'single':
                question = '   Please enter the ' + term + ' you wish to use: '
        elif type == 'list':
                question = '   Please enter the ' + term + ' list you wish to use (full path): ' 
        string = input(question)
        string = flag + ' ' + string
        return(string)

#breakdown the url into the 2 sections we need
def target_split(target):
        url_list = []
        if 'https://' in target:
                target = target[8:]
        elif 'http://' in target:
                target = target[7:]
        count = 0
        for char in target:
                if char != '/':
                        count += 1
                else:
                        break
        url_list.append(target[0:count])
        url_list.append(target[count:])
        return(url_list)

# i will ask the questions around here...
target = input('1) Please enter the full target login page URL: ')
url_list = target_split(target)
base_url = url_list[0]
path_to_login = url_list[1]

brute_type = input('2) Are you bruteforcing usernames or passwords? (u/p): ')
if brute_type == 'u':
        user = single_or_list('username','list')
        passwd = single_or_list('password','single')
elif brute_type == 'p':
        user = single_or_list('username','single')
        passwd = single_or_list('password','list')
else:
        invalid_input()

print('3) Attempt a login with a seperate username and password, and capture the attempt with burpsuite')
request_body = input('   Paste the body of the request here: ')
replace_user = input('   What username did you use in this attempt?: ')
replace_pass = input('   What password did you user in this attempt?: ')
request_body = request_body.replace(replace_user,'^USER^')
request_body = request_body.replace(replace_pass,'^PASS^')
fail_message = input('4) Enter the failure message from an incorrect login (e.g Invalid username): ')

print('\nPlease use the following command to run hydra with the parameters you set:')
print('\nhydra',user,passwd,base_url,'http-post-form','"' + path_to_login + ':' + request_body + ':' + fail_message + '"','-f','-V')
print('\nGoodbye!')
