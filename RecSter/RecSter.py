#import the gubbins
import os
import argparse
import subprocess

#set up the command arguments
parser = argparse.ArgumentParser()
parser.add_argument('-w', default ='none', dest='wordlist', help='Provide a wordlist to use <REQUIRED>', type=str)
parser.add_argument('-u', default='none', dest='target_url', help='Provide the target URL <REQUIRED>', type=str)
parser.add_argument('-o', default='output.txt', dest='output', help='Provide an output filename <OPTIONAL>', type=str)
args = parser.parse_args()

#define the cmdline function
def cmdline(command):
        terminal_output = subprocess.getoutput(command)
        return(terminal_output)

#banner
print('##########################################')
print('#                RecSter                 #')
print('#        A recursive gobuster tool       #')
print('#                  V1.0                  #')
print('#          github.com/the-jcksn          #')
print('#                                        #')
print('#          Props to OJ/Gobuster          #')
print('#                                        #')
print('#         For help: \'recster -h\'         #')
print('#                                        #')
print('##########################################')

#check wordlist provided
if args.wordlist == 'none':
        print('\nWordlist not supplied with \'-w\'.')
        print('Quitting...')
        quit()
else:
        wordlist = args.wordlist

#check target url provided
if args.target_url == 'none':
        print('\nTarget URL not supplied with \'-u\'.')
        print('Quitting')
        quit()
else:
        target_url = args.target_url
#set the output name
output = args.output

#start recster
print('\nStarting RecSter...\n')
print('Target URL:      ',target_url)
print('Using wordlist:  ',wordlist)

#command for initial gobuster scan
scan_cmd = 'gobuster dir -u ' + target_url + ' -w ' + wordlist

print('\nStarting scan, please wait...\n')
print('Recursive searching will take some time, go and put the kettle on!\n')

#run the scan and print only the lines containing directories found
initial_scan = cmdline(scan_cmd)
scan_lines = initial_scan.split('\n')
initial_dirs = []
for line in scan_lines:
        if line[:1] == '/':
                print(line)
                #add directories found to a list
                line_dir_split = line.split(' ')
                line_dir = line_dir_split[0]
                initial_dirs.append(line_dir)

#do the same thing again on the initial list but add to it and perform recursively
for line in initial_dirs:
        scan_cmd = 'gobuster dir -u ' + target_url + line + ' -w ' + wordlist
        scan = cmdline(scan_cmd)
        scan_lines = scan.split('\n')
        for line2 in scan_lines:
                if line2[:1] == '/':
                        print(line + line2)
                        line_dir_split = line2.split(' ')
                        line_dir = line_dir_split[0]
                        line_dir = line + line_dir
                        initial_dirs.append(line_dir)

#write to the output file
with open(output, 'a') as finished:
        for line in initial_dirs:
                finished.write(line)
                finished.write('\n')

print('\nFinished (Finally!)')
print('Found directories written to',output)
