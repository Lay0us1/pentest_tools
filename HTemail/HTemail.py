#htemail
#pulls email addresses from either a file or a URL
#github.com/the-jcksn
#use responsibly

#import the required packages
import argparse
import re
import requests

#define the functions

#create the input list
def create_input(argument):
        print("[+] Pulling email addresses from", argument)
        for line in input_file:
                codeline.append(str(line))

#manipulate the data
def modify_input():
        #check if the line contains an @ symbol and add to possible email list
        for i in codeline:
                if "@" in i:
                        poss_email.append(i)
        #remove unwanted special characters and replace with a space to break the string
        for i in poss_email:
                new_string = i.replace(">", " ")
                new_string = new_string.replace("<", " ")
                new_string = new_string.replace("\"", " ")
                new_string = new_string.replace("\'", " ")
                new_string = new_string.replace(":", " ")
                new_string = new_string.replace("(", " ")
                new_string = new_string.replace(")", " ")
                new_string = new_string.replace("[", " ")
                new_string = new_string.replace("]", " ")
                contains_email.append(new_string)
        #check each string in each line for email address by matching the regex, add emails to deffo email list
        for line in contains_email:
                for string in line.split():
                        if(re.fullmatch(regex, string)):
                                deffo_email.append(string)
                        #code added to match email addresses at the end of a sentence (full stop was preventing email being found)
                        elif(re.fullmatch(regex+".", string)):
                                nodot = string[:-1]
                                deffo_email.append(nodot)

#create the output
def create_output():
        #check for duplicates and add unique emails to no dupes list
        for i in deffo_email:
                if i not in no_dupes:
                        no_dupes.append(i)
        print("[+]",len(no_dupes),"unique email addresses found.")
        #exit if no dupes list is empty
        if len(no_dupes) == 0:
                print("[!] Exiting htmemail")
                quit()
        #save no dupes list to output file
        for i in no_dupes:
                with open(args.output, "a") as output:
                        output.write(i)
                        output.write("\n")
        if args.output == "emails.txt":
                print("[+] Output filename not specified with '-o', results saved to emails.txt")
        else:
                print("[+] Results saved to", args.output)
        #if printtoterm flag present
        if args.printtoterm:
                print("[+] -p flag detected; printing results to terminal:\n")
                for emailadd in no_dupes:
                        print(emailadd)
                print()
        print("[!] Exiting htemail")
        #close the files
        output.close()
        input_file.close()

#add the command arguments
parser = argparse.ArgumentParser()
parser.add_argument('-f', default='none', dest='file', help='Provide an input text file', type=str)
parser.add_argument('-url', default='none', dest='url', help='Provide an input URL', type=str)
parser.add_argument('-o', default='emails.txt', dest='output', help='Provide an output file destination (defaults to \'emails.txt\')',type=str)
parser.add_argument('-p', action='store_true', dest='printtoterm', help='Print the results to terminal as well as saving to output file')
args = parser.parse_args()
#initialise the regex and empty lists
regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
codeline = []
nospaces = []
poss_email = []
contains_email = []
deffo_email = []
no_dupes = []

#if no file and no url supplied, quit
if args.file == "none" and args.url == "none":
        print("[!] Filename or URL not specified, please use '-f FILE' or '-url URL' or '-h' for help.")
        print("[!] Exiting htemail")
        quit()
#if both file and url supplied, panic and then quit
if args.file != "none" and args.url != "none":
        print("[!] Too many inputs specified. Please choose '-f' OR -'url'")
        print("[!] Exiting htemail")
        quit()

#if file supplied, set input to filename and do the stuff
if args.file != "none":
        input_file = open(args.file, "r")
        create_input(args.file)
        modify_input()
        create_output()

#if url supplied, set input to url and do the stuff
if args.url != "none":
        input_file = requests.get(args.url, "r")
        create_input(args.url)
        modify_input()
        create_output()
